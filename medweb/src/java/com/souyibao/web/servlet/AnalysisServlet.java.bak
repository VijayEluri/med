package com.souyibao.web.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.lucene.document.Document;
import org.apache.lucene.index.CorruptIndexException;
import org.apache.lucene.search.Hits;

import com.souyibao.search.searcher.MedSearcher;
import com.souyibao.search.util.SearchResultUtil;
import com.souyibao.shared.DocToKeywordManager;
import com.souyibao.shared.model.KeywordWeight;
import com.souyibao.web.model.AnalysisDocModel;
import com.souyibao.web.model.KeywordToDocCount;
import com.souyibao.web.util.MedWebUtil;
import com.souyibao.web.util.WebConstants;

public class AnalysisServlet extends HttpServlet {	

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		req.setCharacterEncoding("UTF-8");
		
		// query type 
		String qType = req.getParameter("qType");
		System.out.println("query type is : " + qType);

		if (!MedWebUtil.isValidQType(qType)) {
			// default to undefined query type
			qType = WebConstants.UNDEFINED_TYPE;
		}
		
		// query String
		String queryString = req.getParameter("q");
		if ((queryString == null) || ("".equals(queryString.trim()))) {
			forwardToAnalysis(req, resp);
			return;
		}
		
		Hits docHits = null;
		if (qType.equals(WebConstants.UNDEFINED_TYPE)) {
			docHits = MedSearcher.search("document", queryString, null);
		} else if (qType.equals(WebConstants.KEYWORD_ID_TYPE)) {
			// TODO: if it is one invalid keyword id, redirect to error page.
			docHits = MedSearcher.searchByKeywordId("document", queryString);
		} else if (qType.equals(WebConstants.DOCUMENT_ID_TYPE)) {
			// TODO: if it is one invalid doc id, redirect to error page.
			docHits = MedSearcher.searchByDocId("document", queryString);
		}

		if ((docHits == null) || (docHits.length() == 0)) {
			forwardToAnalysis(req, resp);
			return;
		}
		
		List<AnalysisDocModel> analysisModels = new ArrayList<AnalysisDocModel>();
		for (int i = 0; i < docHits.length(); i++) {
			Document doc = docHits.doc(i);

			AnalysisDocModel analysisModel = new AnalysisDocModel();
			String docId = doc.get("id");
			analysisModel.setDocId(docId);
			analysisModel.setDocName(doc.get("name"));
			analysisModel.setDocContent(doc.get("content"));
			
			List<KeywordWeight> keyWeights = DocToKeywordManager.getInstance()
					.getDocKeywords(docId);
			List<KeywordToDocCount> keywordCount = MedWebUtil
					.adapterKeywordWeightToCount(doc, keyWeights);
			analysisModel.setKeywordCounts(keywordCount);
			
			analysisModels.add(analysisModel);
		}
		
		req.setAttribute("AnalysisServlet", analysisModels);
		
		// for the summry
		List<KeywordWeight> docKeywordWeights = null;
		try {
			docKeywordWeights = SearchResultUtil.retriveKeywordWeights(docHits);
		} catch (CorruptIndexException e) {
			throw new RuntimeException(e);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}

		Collection<KeywordWeight> calKeywordWeight = SearchResultUtil
				.calKeywordWeight(docKeywordWeights, null);
		Map<String, List<KeywordWeight>> summryResult = SearchResultUtil
				.groupKeywordByTopic(calKeywordWeight);
		req.setAttribute("summryResult", summryResult);
		
		forwardToAnalysis(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		this.doGet(req, resp);
	}

	private void forwardToAnalysis(HttpServletRequest req,
			HttpServletResponse resp) throws ServletException, IOException {
		// the search result will be forwarded to search.jsp
		RequestDispatcher rd = getServletContext().getRequestDispatcher(
				"/admin/analysis.jsp");
		rd.forward(req, resp);
	}
}