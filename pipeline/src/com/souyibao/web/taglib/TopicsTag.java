package com.souyibao.web.taglib;import java.io.IOException;import java.io.Writer;import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.servlet.jsp.JspException;import com.souyibao.search.SearchResult;import com.souyibao.shared.MedEntityManager;import com.souyibao.shared.entity.Area;import com.souyibao.shared.entity.Topic;import com.souyibao.shared.entity.TopicCategory;import com.souyibao.shared.viewer.IDataProvider;import com.souyibao.web.MedWebManager;import com.souyibao.web.model.SelectOption;import com.souyibao.web.util.MedWebUtil;public class TopicsTag extends MedBaseTag {	/**	 * 	 */	private static final long serialVersionUID = -4194678818595313998L;	private int topicsPerRow = 4;	private int keywordsPerTopic = 10;	private boolean suppressMoreLink = false;	private String htmlID = null;	private static final String CATEGOR_FILTER_PREFIX = "categoryFilter";		public int getTopicsPerRow() {		return topicsPerRow;	}	public void setTopicsPerRow(int topicsPerRow) {		this.topicsPerRow = topicsPerRow;	}	public int getKeywordsPerTopic() {		return keywordsPerTopic;	}	public void setKeywordsPerTopic(int keywordsPerTopic) {		this.keywordsPerTopic = keywordsPerTopic;	}			public boolean isSuppressMoreLink() {		return suppressMoreLink;	}	public void setSuppressMoreLink(boolean suppressMoreLink) {		this.suppressMoreLink = suppressMoreLink;	}		public String getHtmlID() {		return htmlID;	}	public void setHtmlID(String htmlID) {		this.htmlID = htmlID;	}	@Override	public int doEndTag() throws JspException {		return EVAL_PAGE;	}	@Override	public int doStartTag() throws JspException {				SearchResult searchResult = this.getPageData();		if (searchResult == null) {			return SKIP_BODY;		}		Map<Topic, List<IDataProvider>> data = searchResult.getSearchResult();		Map<String, String> categoryFilters = searchResult.getCategoryFilters();		Writer writer = pageContext.getOut();				try {			renderTopicTable(writer, data, categoryFilters);		} catch (IOException e) {			e.printStackTrace();		} catch (Exception e) {			e.printStackTrace();		}		return SKIP_BODY;	}	private void renderTopicTable(Writer writer,			Map<Topic, List<IDataProvider>> data,			Map<String, String> categoryFilters) throws IOException {		if ((data == null) || (data.isEmpty())) {			String information = MedTagUtil.getResource("no_info");			writer.write(information);			return;		}				String searchText = MedTagUtil.outputCurSearchText((HttpServletRequest) pageContext.getRequest());		// at lease one topic exists		StringBuffer strBuf = new StringBuffer();		strBuf.append(MedTagUtil.getResource("result_prompt_txt", new String[]{searchText}));		String topicTableWidth = "100%";		int size = data.size();				if (size < this.topicsPerRow) {			topicTableWidth = (100 / size) + "%";		} else {			topicTableWidth = (100 / topicsPerRow) + "%";		}		strBuf.append("<TABLE cellSpacing=\"0\" cellPadding=\"0\" border=\"0\" width=\"100%\"");		if (htmlID != null) {			strBuf.append(" id=\"").append(htmlID).append("\"");		}		strBuf.append(">\n");		strBuf.append("<TBODY>\n");			// sort the topics.				Collection<Topic> sortedTopics = null;		Set<Topic> curTopics = data.keySet();		if (curTopics.size() == 1) {			sortedTopics = curTopics;		} else {			sortedTopics = sortTopics(curTopics);		}		String queryStr = this.pageContext.getRequest().getParameter("q");		if (queryStr == null) {			queryStr = "";		}				// query items		int topicNumber = 0;		String[] qitems = queryStr.split(" +");		for (Topic topic : sortedTopics) {			topicNumber++;			List<IDataProvider> keyweights = data.get(topic);			if ((topicNumber % topicsPerRow) == 1) {				strBuf.append("<TR>\n");			}			strBuf.append("<TD vAlign=\"top\" width=\"").append(topicTableWidth).append("\">\n");			renderTopic(strBuf, topic, keyweights, qitems, categoryFilters);			strBuf.append("</TD>");			if ((topicNumber % topicsPerRow) == 0) {				strBuf.append("</TR>\n");			}		}		strBuf.append("</TR></TBODY>\n");		strBuf.append("</TABLE>\n");		writer.write(strBuf.toString());	}		private void renderTopic(StringBuffer outString, Topic topic,			List<IDataProvider> keyweights, String[] qitems,			Map<String, String> categoryFilters) {		outString.append("<TABLE cellSpacing=\"0\" cellPadding=\"0\" border=\"0\" width=\"100%\">\n");		outString.append("<TBODY>\n");		outString.append("<TR>\n");		outString.append("<TD with=\"40%\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD class=\"tdTit_g\" nowrap>")				.append(topic.getName()).append("</TD>\n");		// output the category html		outString.append(getCategoryHtml(topic, categoryFilters));				outString.append("<TD with=\"40%\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD></TR>\n");		outString.append("<TR>\n");		outString.append("<TD class=\"tdBor_g\" colspan=\"4\">\n");		renderKeys(outString, keyweights, qitems);		outString.append("</TD>\n");		outString.append("</TR>\n");		if (!suppressMoreLink) {			// check if need to render the more link			if (keyweights.size() > this.keywordsPerTopic) {				outString.append("<TR><TD class=\"tdBott_g\" colspan=\"4\">");				outString.append(getMoreLink(topic));				outString.append("</TD></TR>\n");			} else {				outString.append("<TR><TD class=\"tdBott_g\" colspan=\"4\"></TD></TR>\n");			}		}				outString.append("</TBODY>\n");		outString.append("</TABLE>\n");	}		private String getMoreLink(Topic topic) {		StringBuffer outString = new StringBuffer();		String id = "Topic_" + topic.getId();		outString.append("<A id=\"").append(id);		outString.append("\" href=\"javascript:gT('")				.append(topic.getId()).append("')\">");		outString.append(MedTagUtil.getResource("more_txt")).append("&gt;&gt;&nbsp;&nbsp;&nbsp;").append("</a>");				return outString.toString();	}	private void renderKeys(StringBuffer outString,			List<IDataProvider> keyweights, String[] qitems) {		outString			.append("<TABLE cellSpacing=\"0\" cellPadding=\"0\" width=\"95%\" align=\"left\"  bgColor=\"#ffffff\" border=\"0\">");				outString.append("\n");		outString.append("<TBODY>\n");		int keywordNumber = 0;		IDataProvider kWeight = null;		int keywordRows = (keywordsPerTopic <= 0)? Integer.MAX_VALUE: keywordsPerTopic;		for (Iterator<IDataProvider> weightIterator = keyweights.iterator(); (weightIterator				.hasNext() && (keywordNumber < keywordRows));) {			keywordNumber++;			kWeight = weightIterator.next();			outString.append("<TR><TD class=\"tdLine\" width=\"70%\">");			String id = "key_"+ kWeight.getId();			outString.append("<a id=").append(id);			outString.append(" href=\"javascript:dlg('").append(id)					.append("','").append(kWeight.getTopicId()).append("','")					.append(kWeight.getId()).append("','")					.append(kWeight.getName()).append("')\"");			String aliasText = kWeight.getAlias();//			if ((aliasText != null) && (!"".equals(aliasText))) {				outString.append(" onMouseOver=\"tip('").append(id).append("','")						.append(kWeight.getTopicId()).append("','")						.append(aliasText).append("',").append("fc, bc")						.append(")\" onMouseOut=\"tip('").append(id).append("')\"");//			}			outString.append(">");			outString.append(kWeight.getName()).append(					"</a></TD>\n");//			outString.append(MedWebUtil.getKeywordAliasText(kWeight.getKeyword())).append(//					"</a></TD>\n");//			outString.append("<TD class=\"tdLine\">").append(//					kWeight.getWeight()).append("</TD></TR>\n");			outString.append("</TR>\n");		}		//		if (keywordNumber < keywordRows) {			for (int i = keywordNumber; i < keywordRows; i++) {				outString.append("<TR><TD HEIGHT=\"20px\">&nbsp;</td></TR>");			}//		}		outString.append("</TBODY>\n");		outString.append("</TABLE>\n");	}	private String getCategoryHtml(Topic topic, Map<String, String> categoryFilters) {		Collection<SelectOption> options = MedWebManager.getInstance()				.getEnbTopicCategoryWebTree(topic);		if ((options == null) || (options.isEmpty())) {			// no category has been defined this topic			return "<TD class=\"tdTit_g\">&nbsp;</TD>\n";		}				boolean showAll = false;		SelectOption selectedOption = null; 		StringBuffer outData = new StringBuffer();		String parameterId = CATEGOR_FILTER_PREFIX + topic.getId();		// put the parameter first;									outData.append("<TD class=\"tdTit_g\"><select id=\"").append(				parameterId).append(				"\" align=\"right\" onChange=\"categoryChange(").append(")\">");				if (MedEntityManager.TOPIC_DOCTOR_ID.equals(""+topic.getId())) {			Area area = MedEntityManager.getInstance().getAreaById(categoryFilters.get(topic.getId()+""));			selectedOption = MedWebUtil.formatCategoryFilterVal(topic, area);		} else {			// get the filter category			TopicCategory filterCategory = null;			if (categoryFilters != null) {				String categoryId = categoryFilters.get(""+topic.getId());				filterCategory = MedEntityManager.getInstance().getCategoryById(categoryId);			}						if (filterCategory == null) {				filterCategory = MedEntityManager.getInstance().getPrefCateByTopic(topic);			} 			showAll = (MedEntityManager.ROOT_CATEGORY_ID == filterCategory.getId());							// for the "show all" option			SelectOption rootOption = MedWebUtil.formatCategoryFilterVal(topic, MedEntityManager.getInstance().getRootCategory());			if (showAll) {				outData.append("<option value=\"").append(rootOption.getId())						.append("\" selected>");			} else {							outData.append("<option value=\"").append(rootOption.getId())						.append("\">");			}			outData.append(rootOption.getValue());							if (showAll) {				selectedOption = rootOption;			} else {				selectedOption = MedWebUtil.formatCategoryFilterVal(topic, filterCategory);			}		}				for (Iterator<SelectOption> iterator = options.iterator(); iterator				.hasNext();) {			SelectOption option = iterator.next();			if (option.isEnabled()) {				if ((!showAll) && (selectedOption.getId().equals(option.getId()))) {					outData.append("<option value=\"").append(option.getId())							.append("\" selected>");				} else {					outData.append("<option value=\"").append(option.getId())							.append("\">");				}								for (int i = 0; i < option.getLevel(); i++) {					outData.append("&nbsp;&nbsp;&nbsp;");				}				outData.append(option.getValue());			}		}				outData.append("</select></TD>\n");		return outData.toString();	}		@Override	public void release() {		super.release();	}		private static Collection<Topic> sortTopics(Set<Topic> currTopics) {		Collection<Topic> result = new ArrayList<Topic>();				Collection<Topic> orderedTopics = MedEntityManager.getInstance().getAllTopics();		for (Topic toipc : orderedTopics) {			if (currTopics.contains(toipc)) {				result.add(toipc);			}		}				return result;	}}