package com.souyibao.shared;

import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.souyibao.shared.model.TopicCategory;

public class TopicCategoryManager {
	private static final Log LOG = LogFactory
			.getLog("com.souyibao.shared.TopicCategoryManager");

	private static TopicCategoryManager instance = new TopicCategoryManager();
	private Map<String, Set<TopicCategory>> topicToCategory = 
			new HashMap<String, Set<TopicCategory>>();
	private Map<String, String> TOPIC_TO_CATEPARA = new HashMap<String, String>();
	
	private TopicCategoryManager() {
		loadCategory();
	}
	
	public static TopicCategoryManager getInstance() {
		return instance;
	}

	private void loadCategory() {
		URL resourceURL = TopicCategoryManager.class.getClassLoader().getResource(
				"topic_category.xml");

		try {
			DocumentBuilder builder = DocumentBuilderFactory.newInstance()
					.newDocumentBuilder();
			Document doc = builder.parse(resourceURL.toString());

			if (doc == null) {
				throw new RuntimeException(resourceURL.toString()
						+ " not found");
			}

			Element root = doc.getDocumentElement();
			if (!"topics".equals(root.getTagName()))
				LOG.fatal("bad conf file: top-level element not <topics>");

			NodeList topicNodeList = root.getChildNodes();
			for (int i = 0; i < topicNodeList.getLength(); i++) {
				Node topicNode = topicNodeList.item(i);
				if (!(topicNode instanceof Element))
					continue;

				Element topicEle = (Element) topicNode;
				if ("topic".equals(topicEle.getTagName())) {				
					// create one topic
					String topicId = topicEle.getAttribute("id");
					String para = topicEle.getAttribute("parameterID");
					parseCategory(topicEle, topicId);
					TOPIC_TO_CATEPARA.put(topicId, para);
				}
			}
		} catch (Exception e) {
			LOG.fatal("error parsing conf file: " + e);
			throw new RuntimeException(e);
		}
	}
	
	private void parseCategory(Element topicEle, String topicId) {
		NodeList nodeList = topicEle.getChildNodes();

		for (int i = 0; i < nodeList.getLength(); i++) {
			Node node = nodeList.item(i);
			if (!(node instanceof Element))
				continue;

			Element nodeEle = (Element) node;
			if ("category".equals(nodeEle.getTagName())) {
				// create one topic
				TopicCategory category = new TopicCategory(nodeEle);

				Set categories = topicToCategory.get(topicId);
				if (categories == null) {
					categories = new HashSet<TopicCategory>();
					topicToCategory.put(topicId, categories);
				}

				categories.add(category);
			}
		}
	}
	
	public Set<TopicCategory> getCategories(String topicId) {
		return topicToCategory.get(topicId);
	}
	
	public TopicCategory getTopicCategoryById(String topicId, String categoryId) {
		Set<TopicCategory> categories = topicToCategory.get(topicId);

		for (Iterator<TopicCategory> iterator = categories.iterator(); iterator
				.hasNext();) {
			TopicCategory category = iterator.next();
			if (category.getId().equals(categoryId)) {
				return category;
			}
		}

		return null;
	}
	
	public Map<String, Set<TopicCategory>> getTopicToCategory() {
		return topicToCategory;
	}
	
	public String getCateParaID(String topicId) {
		return TOPIC_TO_CATEPARA.get(topicId);
	}
	
	public Collection<String> getAllCateParaId() {
		Set<String> keys = TOPIC_TO_CATEPARA.keySet();
		
		Collection<String> categories = new ArrayList<String>();
		for (Iterator<String> iterator = keys.iterator(); iterator.hasNext();) {
			categories.add(TOPIC_TO_CATEPARA.get(iterator.next()));
		}
		
		return categories;
	}

	public static void main(String[] args) {
		TopicCategoryManager manager = TopicCategoryManager.getInstance();
		
		Map<String, Set<TopicCategory>> categories = manager
				.getTopicToCategory();
		
		Set<String> keys = categories.keySet();
		for (Iterator<String> iterator = keys.iterator(); iterator.hasNext();) {
			String key = iterator.next();
			
			Set<TopicCategory> data = manager.getCategories(key);
			outputCategory(data);
		}		
	}
	
	private static void outputCategory(Set<TopicCategory> categories) {
		for (Iterator<TopicCategory> iterator = categories.iterator(); iterator
				.hasNext();) {
			TopicCategory category = iterator.next();
			System.out.println("id		: " + category.getId());
			System.out.println("name	: " + category.getName());
			System.out.println("ParentID: " + category.getParentID());
		}
	}
}
