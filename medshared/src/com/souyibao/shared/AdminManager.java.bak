package com.souyibao.shared;

import java.io.FileOutputStream;
import java.net.URL;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.jdom.xpath.XPath;

import com.souyibao.shared.model.Keyword;
import com.souyibao.shared.util.FingerPrintUtil;

public class AdminManager {
	private static Properties configuration = new Properties();
	private static SAXBuilder builder = null; 
	
	static {
		try {
			configuration.load(AdminManager.class.getClassLoader()
					.getResourceAsStream("admin.properties"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void deleteKeyword(String keywordId) {
		Document doc = getKeywordDoc();

		List keywords = null;
		try {
			keywords = XPath.selectNodes(doc, genKeywordXPath(keywordId));
		} catch (JDOMException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if ((keywords != null) && (!keywords.isEmpty())) {
			for (Iterator iterator = keywords.iterator(); iterator.hasNext();) {
				Content keyword = (Content) iterator.next();
				Element parent = keyword.getParentElement();
				boolean removed = parent.removeContent(keyword);

				System.out.println("Removed the keyword: " + keywordId + " "
						+ removed);
			}
		}
		
		outputKeywordDoc(doc);		
	}
	
	public static boolean addKeyword(Keyword keyword) {
		Document doc = getKeywordDoc();
		
		Element rootEle = doc.getRootElement();
		
		int keywordId = FingerPrintUtil.genStringId(keyword.getName());
		
		List keywords = null;;
		try {
			keywords = XPath.selectNodes(doc, genKeywordXPath("" + keywordId));
		} catch (JDOMException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if ((keywords != null) && (!keywords.isEmpty())) {
			// TODO
			throw new RuntimeException("The keyword: " + keyword.getName()
					+ " already exist with id: " + keyword.getId());
		} 
		
		Element keywordEle = genKeywordElement(keyword);
		rootEle.addContent(keywordEle);
		
		outputKeywordDoc(doc);
		
		return true;
	}
	
	public static void updateKeyword(String oldId, Keyword keyword) {
		Document doc = getKeywordDoc();

		List keywords = null;
		try {
			keywords = XPath.selectNodes(doc, genKeywordXPath(oldId));
		} catch (JDOMException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if ((keywords != null) && (!keywords.isEmpty())) {
			Element keywordEle = (Element) keywords.get(0);
			updateKeyword(keywordEle, keyword);
			
			outputKeywordDoc(doc);
		} else {
			throw new RuntimeException("Can't find the keyword: "
					+ keyword.getName() + " with id: " + oldId);
		}
	}

	public static void main(String[] args) {
		System.out.println(configuration);
	}
	
	public static String genKeywordXPath(String keywordId) {
		String xPath = "/keywords/keyword/id[text()=" + "\"" + keywordId
				+ "\"]";
		
		return xPath;
	}
	
	private static Document getKeywordDoc() {
		if (builder == null) {
			builder = new SAXBuilder();
		}

		try {
			return builder.build(AdminManager.class.getClassLoader()
					.getResourceAsStream("keywords.xml"));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
	
	private static void outputKeywordDoc(Document doc) {
		XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());

		URL keywordsURL = AdminManager.class.getClassLoader().getResource(
				"keywords.xml");
		try {
			outputter.output(doc, new FileOutputStream(keywordsURL.toString()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static Element genKeywordElement(Keyword keyword) {
		Element keywordEle = new Element("keyword");
		
		Element idEle = new Element("id");
		idEle.setText("" + FingerPrintUtil.genStringId(keyword.getName()));
		
		Element nameEle = new Element("name");
		nameEle.setText(keyword.getName());
		
		Element topicEle = new Element("topic");
		topicEle.setText(keyword.getTopicId());

		Element categoryEle = new Element("category");
		categoryEle.setText(keyword.getCategory());
		
		Element explanationEle = new Element("explanation");
		explanationEle.setText(keyword.getExplanation());
		
		keywordEle.addContent(idEle);
		keywordEle.addContent(nameEle);
		keywordEle.addContent(topicEle);
		keywordEle.addContent(categoryEle);
		keywordEle.addContent(explanationEle);
		
		return keywordEle;
	}
	
	private static void updateKeyword(Element keywordEle, Keyword keyword) {
		Element idEle = keywordEle.getChild("id");
		Element nameEle = keywordEle.getChild("name");
		Element topicEle = keywordEle.getChild("topic");
		Element categoryEle = keywordEle.getChild("category");
		Element explanationEle = keywordEle.getChild("explanation");
		
		if (idEle == null) {
			idEle = new Element("id");
			keywordEle.addContent(idEle);
		}
		
		if (nameEle == null) {
			nameEle = new Element("name");
			keywordEle.addContent(nameEle);
		}
		
		if (topicEle == null) {
			topicEle = new Element("topic");
			keywordEle.addContent(topicEle);
		}
		
		if (categoryEle == null) {
			categoryEle = new Element("category");
			keywordEle.addContent(categoryEle);
		}
		
		if (explanationEle == null) {
			explanationEle = new Element("explanation");
			keywordEle.addContent(explanationEle);
		}
		
		idEle.setText("" + FingerPrintUtil.genStringId(keyword.getName()));
		nameEle.setText(keyword.getName());
		topicEle.setText(keyword.getTopicId());
		categoryEle.setText(keyword.getCategory());
		explanationEle.setText(keyword.getExplanation());
	}
}
